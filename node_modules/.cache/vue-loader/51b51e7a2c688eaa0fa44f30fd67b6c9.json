{"remainingRequest":"/Users/lijiancheng/Agree/Vue0815/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lijiancheng/Agree/Vue0815/src/views/global/changePassword.bak copy.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lijiancheng/Agree/Vue0815/src/views/global/changePassword.bak copy.vue","mtime":1566441280008},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mixins } from \"@v2-lib/vue.spa.plugin\";\r\nimport vda from \"@/api/pipe.vda.js\";\r\nimport echarts from \"echarts\";\r\n// import tree from \"./tree/tree.vue\";\r\n// import node from \"./tree/node.vue\";\r\nexport default {\r\n  mixins: [mixins],\r\n  components: {\r\n    // tree,\r\n    // node\r\n  },\r\n  data() {\r\n    var _this = this;\r\n    var validatePwd = (rule, value, callback) => {\r\n        if (value === \"\") {\r\n          callback(new Error(\"请输入密码\"));\r\n          //(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})\r\n        } else if (\r\n          !/(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})/g.test(\r\n            value\r\n          )\r\n        ) {\r\n          callback(new Error(\"密码长度需在6-30之间，并且包含数字、字母和符号\"));\r\n        } else {\r\n          callback();\r\n        }\r\n      },\r\n      validateRepeatPwd = (rule, value, callback) => {\r\n        if (value === \"\") {\r\n          callback(new Error(\"请输入密码\"));\r\n        } else if (_this.changePwdForm.newPwd !== value) {\r\n          callback(new Error(\"两次密码不一致\"));\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n    return {\r\n      changePwdForm: {\r\n        oldPwd: \"\",\r\n        newPwd: \"\",\r\n        repeatPwd: \"\"\r\n      },\r\n\r\n      changePwdFormRules: {\r\n        oldPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validatePwd, trigger: \"blur\" }\r\n        ],\r\n        newPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validatePwd, trigger: \"blur\" }\r\n        ],\r\n        repeatPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validateRepeatPwd, trigger: \"blur\" }\r\n        ]\r\n      },\r\n      tree: [],\r\n      treeProps: {\r\n        children: \"children\",\r\n        label: \"tree_node_desc\",\r\n        id: \"tree_node_name\"\r\n      },\r\n      data: {},\r\n      echarts: null\r\n    };\r\n  },\r\n  props: {\r\n    params: String //父组件传过来的参数\r\n  },\r\n  methods: {\r\n    changePassword: function() {\r\n      this.$refs.changePwdForm.validate(valid => {\r\n        if (valid) {\r\n          this.addLoading = true;\r\n          let params = {};\r\n\r\n          params.oldPassword = this.changePwdForm.oldPwd;\r\n          params.newPassword = this.changePwdForm.newPwd;\r\n          params.repeatNewPassword = this.changePwdForm.repeatPwd;\r\n          this.$axios\r\n            .put(\r\n              `${\r\n                this.$axios.server\r\n              }/changePassword.do?ctoken=${localStorage.getItem(\r\n                \"ctoken\"\r\n              )}&oldPassword=${params.oldPassword}&newPassword=${\r\n                params.newPassword\r\n              }&repeatNewPassword=${params.repeatNewPassword}`\r\n            )\r\n            .then(res => {\r\n              this.addLoading = false;\r\n              if (res.status) {\r\n                this.$notify({\r\n                  title: \"修改密码成功\",\r\n                  type: \"success\"\r\n                });\r\n                this.$refs.changePwdForm.resetFields();\r\n              } else {\r\n                this.$notify({\r\n                  title: \"修改密码失败\",\r\n                  message: res.errorMsg,\r\n                  type: \"error\"\r\n                });\r\n              }\r\n            });\r\n          // this.$putAxios(\r\n          // \t`${this.$axios.server}/changePassword.do`,\r\n          // \tparams\r\n          // ).then(res => {\r\n          // \tthis.addLoading = false;\r\n          // \tif (res.status) {\r\n          // \t\tthis.$notify({\r\n          // \t\t\ttitle: \"修改密码成功\",\r\n          // \t\t\ttype: \"success\"\r\n          // \t\t});\r\n          // \t\tthis.$refs.changePwdForm.resetFields();\r\n          // \t} else {\r\n          // \t\tthis.$notify({\r\n          // \t\t\ttitle: \"修改密码失败\",\r\n          // \t\t\tmessage:res.errorMsg,\r\n          // \t\t\ttype: \"error\"\r\n          // \t\t});\r\n          // \t}\r\n          // });\r\n        }\r\n      });\r\n    },\r\n    selectItem(node) {\r\n      if (node.children && node.children.length) {\r\n      } else {\r\n        vda.data(node[this.treeProps.id]).then(res => {\r\n\r\n          const option = {\r\n            legend: 1,//显示指标\r\n            x: 0,//x维度\r\n            y: 2,//y维度\r\n\t\t\tcountUp: true,//指标是否汇总\r\n\t\t\tinterval:10000,//轮询间隔\r\n          };\r\n          const data = res.content.data;\r\n\r\n          let echartsOption = {\r\n            legend: option.countUp\r\n              ? [\"下载量\"]\r\n              : Array.from(new Set(data.map(e => e[option.legend]))),\r\n            xAxis: Array.from(new Set(data.map(e => e[option.x]))),\r\n            yAxis: {}\r\n\t\t  };\r\n\t\t  \r\n\t\t  const yAxis=echartsOption.yAxis;\r\n          data.forEach(e => {\r\n            if (option.countUp) {\r\n              yAxis[e[option.x]] = yAxis[e[option.x]] || 0;\r\n\r\n              yAxis[e[option.x]] += e[option.y];\r\n            } else {\r\n              yAxis[e[option.legend]] =\r\n                yAxis[e[option.legend]] || {};\r\n              yAxis[e[option.legend]][e[option.x]] = e[option.y];\r\n            }\r\n          });\r\n          debugger;\r\n\r\n          this.data = {\r\n            title: {\r\n              text: \"折线图堆叠\"\r\n            },\r\n            tooltip: {\r\n              trigger: \"axis\"\r\n            },\r\n            legend: {\r\n              data: echartsOption.legend //[\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"]\r\n            },\r\n            grid: {\r\n              left: \"3%\",\r\n              right: \"4%\",\r\n              bottom: \"3%\",\r\n              containLabel: true\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            xAxis: {\r\n              type: \"category\",\r\n              boundaryGap: false,\r\n              data: echartsOption.xAxis\r\n            },\r\n            yAxis: {\r\n              type: \"value\"\r\n            },\r\n\t\t\tseries: option.countUp?[{\r\n\t\t\t\tname:echartsOption.legend[0],\r\n\t\t\t\ttype:'line',\r\n\t\t\t\tdata:echartsOption.xAxis.map(x => yAxis[x] || 0)\r\n\t\t\t}]:\r\n\t\t\techartsOption.legend.map(l => {\r\n              const legend = yAxis[l] || {};\r\n              return {\r\n                name: l,\r\n                type: \"line\",\r\n                data: echartsOption.xAxis.map(x => legend[x] || 0)\r\n              };\r\n            })\r\n          };\r\n        });\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    console.log(\"刷新表格页面,参数\", this.params);\r\n\r\n    vda.ready().then(() =>\r\n      vda.list().then(r => {\r\n        const ret = r.content.ret || [];\r\n        this.tree = ret.filter(e => e[this.treeProps.label] === \"数据源模型\");\r\n      })\r\n    );\r\n  },\r\n  resume() {\r\n    console.log(\"表格页面resume\");\r\n  },\r\n  pause() {\r\n    console.log(\"表格页面pause\");\r\n  },\r\n  watch: {\r\n    data: {\r\n      handler(n, o) {\r\n        debugger;\r\n        if (this.echarts) {\r\n          this.echarts.setOption(this.data);\r\n        } else {\r\n          this.echarts = echarts.init(this.$refs.echartsCtn);\r\n\r\n          this.echarts.setOption(this.data);\r\n\r\n          window.eee = this.echarts;\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["changePassword.bak copy.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"changePassword.bak copy.vue","sourceRoot":"src/views/global","sourcesContent":["<template>\r\n  <section>\r\n    <!--工具条-->\r\n    <!-- <el-col\r\n      :span=\"24\"\r\n      class=\"aweb-table-toolbar\"\r\n      style=\"padding-bottom: 0px; width:500px;margin-left:calc((100% - 500px)/2); text-align:center;\"\r\n    >\r\n      <el-form\r\n        :model=\"changePwdForm\"\r\n        label-width=\"120px\"\r\n        :rules=\"changePwdFormRules\"\r\n        ref=\"changePwdForm\"\r\n        size=\"mini\"\r\n      >\r\n        <el-form-item label=\"旧密码\" prop=\"oldPwd\">\r\n          <el-input\r\n            placeholder=\"请输入旧密码\"\r\n            v-model=\"changePwdForm.oldPwd\"\r\n            auto-complete=\"off\"\r\n            show-password\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"新密码\" prop=\"newPwd\">\r\n          <el-input\r\n            placeholder=\"请输入新密码\"\r\n            v-model=\"changePwdForm.newPwd\"\r\n            auto-complete=\"off\"\r\n            show-password\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"重复新密码\" prop=\"repeatPwd\">\r\n          <el-input\r\n            placeholder=\"请重复新密码\"\r\n            v-model=\"changePwdForm.repeatPwd\"\r\n            auto-complete=\"off\"\r\n            show-password\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" v-on:click=\"changePassword\">提交</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-col>-->\r\n    <el-col :span=\"24\">\r\n      <div class=\"vda-ctn\">\r\n        <el-tree :data=\"tree\" :props=\"treeProps\" @node-click=\"selectItem\" class=\"vda-api-list\"></el-tree>\r\n        <div class=\"vda-config-ctn\">\r\n          <div class=\"vda-config-ctt\"></div>\r\n          <div class=\"vda-preview-ctn\" ref=\"echartsCtn\"></div>\r\n        </div>\r\n      </div>\r\n    </el-col>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport { mixins } from \"@v2-lib/vue.spa.plugin\";\r\nimport vda from \"@/api/pipe.vda.js\";\r\nimport echarts from \"echarts\";\r\n// import tree from \"./tree/tree.vue\";\r\n// import node from \"./tree/node.vue\";\r\nexport default {\r\n  mixins: [mixins],\r\n  components: {\r\n    // tree,\r\n    // node\r\n  },\r\n  data() {\r\n    var _this = this;\r\n    var validatePwd = (rule, value, callback) => {\r\n        if (value === \"\") {\r\n          callback(new Error(\"请输入密码\"));\r\n          //(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})\r\n        } else if (\r\n          !/(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})/g.test(\r\n            value\r\n          )\r\n        ) {\r\n          callback(new Error(\"密码长度需在6-30之间，并且包含数字、字母和符号\"));\r\n        } else {\r\n          callback();\r\n        }\r\n      },\r\n      validateRepeatPwd = (rule, value, callback) => {\r\n        if (value === \"\") {\r\n          callback(new Error(\"请输入密码\"));\r\n        } else if (_this.changePwdForm.newPwd !== value) {\r\n          callback(new Error(\"两次密码不一致\"));\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n    return {\r\n      changePwdForm: {\r\n        oldPwd: \"\",\r\n        newPwd: \"\",\r\n        repeatPwd: \"\"\r\n      },\r\n\r\n      changePwdFormRules: {\r\n        oldPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validatePwd, trigger: \"blur\" }\r\n        ],\r\n        newPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validatePwd, trigger: \"blur\" }\r\n        ],\r\n        repeatPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validateRepeatPwd, trigger: \"blur\" }\r\n        ]\r\n      },\r\n      tree: [],\r\n      treeProps: {\r\n        children: \"children\",\r\n        label: \"tree_node_desc\",\r\n        id: \"tree_node_name\"\r\n      },\r\n      data: {},\r\n      echarts: null\r\n    };\r\n  },\r\n  props: {\r\n    params: String //父组件传过来的参数\r\n  },\r\n  methods: {\r\n    changePassword: function() {\r\n      this.$refs.changePwdForm.validate(valid => {\r\n        if (valid) {\r\n          this.addLoading = true;\r\n          let params = {};\r\n\r\n          params.oldPassword = this.changePwdForm.oldPwd;\r\n          params.newPassword = this.changePwdForm.newPwd;\r\n          params.repeatNewPassword = this.changePwdForm.repeatPwd;\r\n          this.$axios\r\n            .put(\r\n              `${\r\n                this.$axios.server\r\n              }/changePassword.do?ctoken=${localStorage.getItem(\r\n                \"ctoken\"\r\n              )}&oldPassword=${params.oldPassword}&newPassword=${\r\n                params.newPassword\r\n              }&repeatNewPassword=${params.repeatNewPassword}`\r\n            )\r\n            .then(res => {\r\n              this.addLoading = false;\r\n              if (res.status) {\r\n                this.$notify({\r\n                  title: \"修改密码成功\",\r\n                  type: \"success\"\r\n                });\r\n                this.$refs.changePwdForm.resetFields();\r\n              } else {\r\n                this.$notify({\r\n                  title: \"修改密码失败\",\r\n                  message: res.errorMsg,\r\n                  type: \"error\"\r\n                });\r\n              }\r\n            });\r\n          // this.$putAxios(\r\n          // \t`${this.$axios.server}/changePassword.do`,\r\n          // \tparams\r\n          // ).then(res => {\r\n          // \tthis.addLoading = false;\r\n          // \tif (res.status) {\r\n          // \t\tthis.$notify({\r\n          // \t\t\ttitle: \"修改密码成功\",\r\n          // \t\t\ttype: \"success\"\r\n          // \t\t});\r\n          // \t\tthis.$refs.changePwdForm.resetFields();\r\n          // \t} else {\r\n          // \t\tthis.$notify({\r\n          // \t\t\ttitle: \"修改密码失败\",\r\n          // \t\t\tmessage:res.errorMsg,\r\n          // \t\t\ttype: \"error\"\r\n          // \t\t});\r\n          // \t}\r\n          // });\r\n        }\r\n      });\r\n    },\r\n    selectItem(node) {\r\n      if (node.children && node.children.length) {\r\n      } else {\r\n        vda.data(node[this.treeProps.id]).then(res => {\r\n\r\n          const option = {\r\n            legend: 1,//显示指标\r\n            x: 0,//x维度\r\n            y: 2,//y维度\r\n\t\t\tcountUp: true,//指标是否汇总\r\n\t\t\tinterval:10000,//轮询间隔\r\n          };\r\n          const data = res.content.data;\r\n\r\n          let echartsOption = {\r\n            legend: option.countUp\r\n              ? [\"下载量\"]\r\n              : Array.from(new Set(data.map(e => e[option.legend]))),\r\n            xAxis: Array.from(new Set(data.map(e => e[option.x]))),\r\n            yAxis: {}\r\n\t\t  };\r\n\t\t  \r\n\t\t  const yAxis=echartsOption.yAxis;\r\n          data.forEach(e => {\r\n            if (option.countUp) {\r\n              yAxis[e[option.x]] = yAxis[e[option.x]] || 0;\r\n\r\n              yAxis[e[option.x]] += e[option.y];\r\n            } else {\r\n              yAxis[e[option.legend]] =\r\n                yAxis[e[option.legend]] || {};\r\n              yAxis[e[option.legend]][e[option.x]] = e[option.y];\r\n            }\r\n          });\r\n          debugger;\r\n\r\n          this.data = {\r\n            title: {\r\n              text: \"折线图堆叠\"\r\n            },\r\n            tooltip: {\r\n              trigger: \"axis\"\r\n            },\r\n            legend: {\r\n              data: echartsOption.legend //[\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"]\r\n            },\r\n            grid: {\r\n              left: \"3%\",\r\n              right: \"4%\",\r\n              bottom: \"3%\",\r\n              containLabel: true\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            xAxis: {\r\n              type: \"category\",\r\n              boundaryGap: false,\r\n              data: echartsOption.xAxis\r\n            },\r\n            yAxis: {\r\n              type: \"value\"\r\n            },\r\n\t\t\tseries: option.countUp?[{\r\n\t\t\t\tname:echartsOption.legend[0],\r\n\t\t\t\ttype:'line',\r\n\t\t\t\tdata:echartsOption.xAxis.map(x => yAxis[x] || 0)\r\n\t\t\t}]:\r\n\t\t\techartsOption.legend.map(l => {\r\n              const legend = yAxis[l] || {};\r\n              return {\r\n                name: l,\r\n                type: \"line\",\r\n                data: echartsOption.xAxis.map(x => legend[x] || 0)\r\n              };\r\n            })\r\n          };\r\n        });\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    console.log(\"刷新表格页面,参数\", this.params);\r\n\r\n    vda.ready().then(() =>\r\n      vda.list().then(r => {\r\n        const ret = r.content.ret || [];\r\n        this.tree = ret.filter(e => e[this.treeProps.label] === \"数据源模型\");\r\n      })\r\n    );\r\n  },\r\n  resume() {\r\n    console.log(\"表格页面resume\");\r\n  },\r\n  pause() {\r\n    console.log(\"表格页面pause\");\r\n  },\r\n  watch: {\r\n    data: {\r\n      handler(n, o) {\r\n        debugger;\r\n        if (this.echarts) {\r\n          this.echarts.setOption(this.data);\r\n        } else {\r\n          this.echarts = echarts.init(this.$refs.echartsCtn);\r\n\r\n          this.echarts.setOption(this.data);\r\n\r\n          window.eee = this.echarts;\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.aweb-table-toolbar {\r\n  padding: 12px;\r\n  text-align: left;\r\n}\r\n.vda-ctn {\r\n  display: flex;\r\n  flex-direction: row;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.el-tree.vda-api-list {\r\n  width: 200px;\r\n  overflow: auto;\r\n}\r\n\r\n.vda-config-ctn {\r\n  flex: 1;\r\n  overflow: auto;\r\n  height: 100%;\r\n}\r\n.vda-preview-ctn {\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow: auto;\r\n}\r\n</style>"]}]}