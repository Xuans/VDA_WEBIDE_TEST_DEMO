{"remainingRequest":"/Users/lijiancheng/Agree/Vue0815/node_modules/babel-loader/lib/index.js!/Users/lijiancheng/Agree/Vue0815/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lijiancheng/Agree/Vue0815/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lijiancheng/Agree/Vue0815/src/views/global/changePassword.bak.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lijiancheng/Agree/Vue0815/src/views/global/changePassword.bak.vue","mtime":1566441274810},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lijiancheng/Agree/Vue0815/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mixins } from \"@v2-lib/vue.spa.plugin\";\nimport vda from \"@/api/pipe.vda.js\";\nimport echarts from \"echarts\"; // import tree from \"./tree/tree.vue\";\n// import node from \"./tree/node.vue\";\n\nexport default {\n  mixins: [mixins],\n  components: {// tree,\n    // node\n  },\n  data: function data() {\n    var _this = this;\n\n    var validatePwd = function validatePwd(rule, value, callback) {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\")); //(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})\n      } else if (!/(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})/g.test(value)) {\n        callback(new Error(\"密码长度需在6-30之间，并且包含数字、字母和符号\"));\n      } else {\n        callback();\n      }\n    },\n        validateRepeatPwd = function validateRepeatPwd(rule, value, callback) {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));\n      } else if (_this.changePwdForm.newPwd !== value) {\n        callback(new Error(\"两次密码不一致\"));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      changePwdForm: {\n        oldPwd: \"\",\n        newPwd: \"\",\n        repeatPwd: \"\"\n      },\n      changePwdFormRules: {\n        oldPwd: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }, {\n          validator: validatePwd,\n          trigger: \"blur\"\n        }],\n        newPwd: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }, {\n          validator: validatePwd,\n          trigger: \"blur\"\n        }],\n        repeatPwd: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }, {\n          validator: validateRepeatPwd,\n          trigger: \"blur\"\n        }]\n      },\n      tree: [],\n      treeProps: {\n        children: \"children\",\n        label: \"tree_node_desc\",\n        id: \"tree_node_name\"\n      },\n      data: {},\n      echarts: null\n    };\n  },\n  props: {\n    params: String //父组件传过来的参数\n\n  },\n  methods: {\n    changePassword: function changePassword() {\n      var _this2 = this;\n\n      this.$refs.changePwdForm.validate(function (valid) {\n        if (valid) {\n          _this2.addLoading = true;\n          var params = {};\n          params.oldPassword = _this2.changePwdForm.oldPwd;\n          params.newPassword = _this2.changePwdForm.newPwd;\n          params.repeatNewPassword = _this2.changePwdForm.repeatPwd;\n\n          _this2.$axios.put(\"\".concat(_this2.$axios.server, \"/changePassword.do?ctoken=\").concat(localStorage.getItem(\"ctoken\"), \"&oldPassword=\").concat(params.oldPassword, \"&newPassword=\").concat(params.newPassword, \"&repeatNewPassword=\").concat(params.repeatNewPassword)).then(function (res) {\n            _this2.addLoading = false;\n\n            if (res.status) {\n              _this2.$notify({\n                title: \"修改密码成功\",\n                type: \"success\"\n              });\n\n              _this2.$refs.changePwdForm.resetFields();\n            } else {\n              _this2.$notify({\n                title: \"修改密码失败\",\n                message: res.errorMsg,\n                type: \"error\"\n              });\n            }\n          }); // this.$putAxios(\n          // \t`${this.$axios.server}/changePassword.do`,\n          // \tparams\n          // ).then(res => {\n          // \tthis.addLoading = false;\n          // \tif (res.status) {\n          // \t\tthis.$notify({\n          // \t\t\ttitle: \"修改密码成功\",\n          // \t\t\ttype: \"success\"\n          // \t\t});\n          // \t\tthis.$refs.changePwdForm.resetFields();\n          // \t} else {\n          // \t\tthis.$notify({\n          // \t\t\ttitle: \"修改密码失败\",\n          // \t\t\tmessage:res.errorMsg,\n          // \t\t\ttype: \"error\"\n          // \t\t});\n          // \t}\n          // });\n\n        }\n      });\n    },\n    selectItem: function selectItem(node) {\n      var _this3 = this;\n\n      if (node.children && node.children.length) {} else {\n        vda.data(node[this.treeProps.id]).then(function (res) {\n          var option = {\n            legend: 1,\n            //显示指标\n            x: 0,\n            //x维度\n            y: 2,\n            //y维度\n            countUp: true,\n            //指标是否汇总\n            interval: 10000 //轮询间隔\n\n          };\n          var data = res.content.data;\n          var echartsOption = {\n            legend: option.countUp ? [\"下载量\"] : Array.from(new Set(data.map(function (e) {\n              return e[option.legend];\n            }))),\n            xAxis: Array.from(new Set(data.map(function (e) {\n              return e[option.x];\n            }))),\n            yAxis: {}\n          };\n          var yAxis = echartsOption.yAxis;\n          data.forEach(function (e) {\n            if (option.countUp) {\n              yAxis[e[option.x]] = yAxis[e[option.x]] || 0;\n              yAxis[e[option.x]] += e[option.y];\n            } else {\n              yAxis[e[option.legend]] = yAxis[e[option.legend]] || {};\n              yAxis[e[option.legend]][e[option.x]] = e[option.y];\n            }\n          });\n          debugger;\n          _this3.data = {\n            title: {\n              text: \"折线图堆叠\"\n            },\n            tooltip: {\n              trigger: \"axis\"\n            },\n            legend: {\n              data: echartsOption.legend //[\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"]\n\n            },\n            grid: {\n              left: \"3%\",\n              right: \"4%\",\n              bottom: \"3%\",\n              containLabel: true\n            },\n            toolbox: {\n              feature: {\n                saveAsImage: {}\n              }\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: false,\n              data: echartsOption.xAxis\n            },\n            yAxis: {\n              type: \"value\"\n            },\n            series: option.countUp ? [{\n              name: echartsOption.legend[0],\n              type: 'line',\n              data: echartsOption.xAxis.map(function (x) {\n                return yAxis[x] || 0;\n              })\n            }] : echartsOption.legend.map(function (l) {\n              var legend = yAxis[l] || {};\n              return {\n                name: l,\n                type: \"line\",\n                data: echartsOption.xAxis.map(function (x) {\n                  return legend[x] || 0;\n                })\n              };\n            })\n          };\n        });\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    console.log(\"刷新表格页面,参数\", this.params);\n    vda.ready().then(function () {\n      return vda.list().then(function (r) {\n        var ret = r.content.ret || [];\n        _this4.tree = ret.filter(function (e) {\n          return e[_this4.treeProps.label] === \"数据源模型\";\n        });\n      });\n    });\n  },\n  resume: function resume() {\n    console.log(\"表格页面resume\");\n  },\n  pause: function pause() {\n    console.log(\"表格页面pause\");\n  },\n  watch: {\n    data: {\n      handler: function handler(n, o) {\n        debugger;\n\n        if (this.echarts) {\n          this.echarts.setOption(this.data);\n        } else {\n          this.echarts = echarts.init(this.$refs.echartsCtn);\n          this.echarts.setOption(this.data);\n          window.eee = this.echarts;\n        }\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"sources":["changePassword.bak.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <section>\r\n    <!--工具条-->\r\n    <!-- <el-col\r\n      :span=\"24\"\r\n      class=\"aweb-table-toolbar\"\r\n      style=\"padding-bottom: 0px; width:500px;margin-left:calc((100% - 500px)/2); text-align:center;\"\r\n    >\r\n      <el-form\r\n        :model=\"changePwdForm\"\r\n        label-width=\"120px\"\r\n        :rules=\"changePwdFormRules\"\r\n        ref=\"changePwdForm\"\r\n        size=\"mini\"\r\n      >\r\n        <el-form-item label=\"旧密码\" prop=\"oldPwd\">\r\n          <el-input\r\n            placeholder=\"请输入旧密码\"\r\n            v-model=\"changePwdForm.oldPwd\"\r\n            auto-complete=\"off\"\r\n            show-password\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"新密码\" prop=\"newPwd\">\r\n          <el-input\r\n            placeholder=\"请输入新密码\"\r\n            v-model=\"changePwdForm.newPwd\"\r\n            auto-complete=\"off\"\r\n            show-password\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"重复新密码\" prop=\"repeatPwd\">\r\n          <el-input\r\n            placeholder=\"请重复新密码\"\r\n            v-model=\"changePwdForm.repeatPwd\"\r\n            auto-complete=\"off\"\r\n            show-password\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" v-on:click=\"changePassword\">提交</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-col>-->\r\n    <el-col :span=\"24\">\r\n      <div class=\"vda-ctn\">\r\n        <el-tree :data=\"tree\" :props=\"treeProps\" @node-click=\"selectItem\" class=\"vda-api-list\"></el-tree>\r\n        <div class=\"vda-config-ctn\">\r\n          <div class=\"vda-config-ctt\"></div>\r\n          <div class=\"vda-preview-ctn\" ref=\"echartsCtn\"></div>\r\n        </div>\r\n      </div>\r\n    </el-col>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport { mixins } from \"@v2-lib/vue.spa.plugin\";\r\nimport vda from \"@/api/pipe.vda.js\";\r\nimport echarts from \"echarts\";\r\n// import tree from \"./tree/tree.vue\";\r\n// import node from \"./tree/node.vue\";\r\nexport default {\r\n  mixins: [mixins],\r\n  components: {\r\n    // tree,\r\n    // node\r\n  },\r\n  data() {\r\n    var _this = this;\r\n    var validatePwd = (rule, value, callback) => {\r\n        if (value === \"\") {\r\n          callback(new Error(\"请输入密码\"));\r\n          //(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})\r\n        } else if (\r\n          !/(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[~!#@&%\\\\^\\\\$_\\\\(\\\\)\\\\*\\\\.]+$)(.{6,30})/g.test(\r\n            value\r\n          )\r\n        ) {\r\n          callback(new Error(\"密码长度需在6-30之间，并且包含数字、字母和符号\"));\r\n        } else {\r\n          callback();\r\n        }\r\n      },\r\n      validateRepeatPwd = (rule, value, callback) => {\r\n        if (value === \"\") {\r\n          callback(new Error(\"请输入密码\"));\r\n        } else if (_this.changePwdForm.newPwd !== value) {\r\n          callback(new Error(\"两次密码不一致\"));\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n    return {\r\n      changePwdForm: {\r\n        oldPwd: \"\",\r\n        newPwd: \"\",\r\n        repeatPwd: \"\"\r\n      },\r\n\r\n      changePwdFormRules: {\r\n        oldPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validatePwd, trigger: \"blur\" }\r\n        ],\r\n        newPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validatePwd, trigger: \"blur\" }\r\n        ],\r\n        repeatPwd: [\r\n          { required: true, message: \"请输入密码\", trigger: \"blur\" },\r\n          { validator: validateRepeatPwd, trigger: \"blur\" }\r\n        ]\r\n      },\r\n      tree: [],\r\n      treeProps: {\r\n        children: \"children\",\r\n        label: \"tree_node_desc\",\r\n        id: \"tree_node_name\"\r\n      },\r\n      data: {},\r\n      echarts: null\r\n    };\r\n  },\r\n  props: {\r\n    params: String //父组件传过来的参数\r\n  },\r\n  methods: {\r\n    changePassword: function() {\r\n      this.$refs.changePwdForm.validate(valid => {\r\n        if (valid) {\r\n          this.addLoading = true;\r\n          let params = {};\r\n\r\n          params.oldPassword = this.changePwdForm.oldPwd;\r\n          params.newPassword = this.changePwdForm.newPwd;\r\n          params.repeatNewPassword = this.changePwdForm.repeatPwd;\r\n          this.$axios\r\n            .put(\r\n              `${\r\n                this.$axios.server\r\n              }/changePassword.do?ctoken=${localStorage.getItem(\r\n                \"ctoken\"\r\n              )}&oldPassword=${params.oldPassword}&newPassword=${\r\n                params.newPassword\r\n              }&repeatNewPassword=${params.repeatNewPassword}`\r\n            )\r\n            .then(res => {\r\n              this.addLoading = false;\r\n              if (res.status) {\r\n                this.$notify({\r\n                  title: \"修改密码成功\",\r\n                  type: \"success\"\r\n                });\r\n                this.$refs.changePwdForm.resetFields();\r\n              } else {\r\n                this.$notify({\r\n                  title: \"修改密码失败\",\r\n                  message: res.errorMsg,\r\n                  type: \"error\"\r\n                });\r\n              }\r\n            });\r\n          // this.$putAxios(\r\n          // \t`${this.$axios.server}/changePassword.do`,\r\n          // \tparams\r\n          // ).then(res => {\r\n          // \tthis.addLoading = false;\r\n          // \tif (res.status) {\r\n          // \t\tthis.$notify({\r\n          // \t\t\ttitle: \"修改密码成功\",\r\n          // \t\t\ttype: \"success\"\r\n          // \t\t});\r\n          // \t\tthis.$refs.changePwdForm.resetFields();\r\n          // \t} else {\r\n          // \t\tthis.$notify({\r\n          // \t\t\ttitle: \"修改密码失败\",\r\n          // \t\t\tmessage:res.errorMsg,\r\n          // \t\t\ttype: \"error\"\r\n          // \t\t});\r\n          // \t}\r\n          // });\r\n        }\r\n      });\r\n    },\r\n    selectItem(node) {\r\n      if (node.children && node.children.length) {\r\n      } else {\r\n        vda.data(node[this.treeProps.id]).then(res => {\r\n\r\n          const option = {\r\n            legend: 1,//显示指标\r\n            x: 0,//x维度\r\n            y: 2,//y维度\r\n\t\t\tcountUp: true,//指标是否汇总\r\n\t\t\tinterval:10000,//轮询间隔\r\n          };\r\n          const data = res.content.data;\r\n\r\n          let echartsOption = {\r\n            legend: option.countUp\r\n              ? [\"下载量\"]\r\n              : Array.from(new Set(data.map(e => e[option.legend]))),\r\n            xAxis: Array.from(new Set(data.map(e => e[option.x]))),\r\n            yAxis: {}\r\n\t\t  };\r\n\t\t  \r\n\t\t  const yAxis=echartsOption.yAxis;\r\n          data.forEach(e => {\r\n            if (option.countUp) {\r\n              yAxis[e[option.x]] = yAxis[e[option.x]] || 0;\r\n\r\n              yAxis[e[option.x]] += e[option.y];\r\n            } else {\r\n              yAxis[e[option.legend]] =\r\n                yAxis[e[option.legend]] || {};\r\n              yAxis[e[option.legend]][e[option.x]] = e[option.y];\r\n            }\r\n          });\r\n          debugger;\r\n\r\n          this.data = {\r\n            title: {\r\n              text: \"折线图堆叠\"\r\n            },\r\n            tooltip: {\r\n              trigger: \"axis\"\r\n            },\r\n            legend: {\r\n              data: echartsOption.legend //[\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"]\r\n            },\r\n            grid: {\r\n              left: \"3%\",\r\n              right: \"4%\",\r\n              bottom: \"3%\",\r\n              containLabel: true\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                saveAsImage: {}\r\n              }\r\n            },\r\n            xAxis: {\r\n              type: \"category\",\r\n              boundaryGap: false,\r\n              data: echartsOption.xAxis\r\n            },\r\n            yAxis: {\r\n              type: \"value\"\r\n            },\r\n\t\t\tseries: option.countUp?[{\r\n\t\t\t\tname:echartsOption.legend[0],\r\n\t\t\t\ttype:'line',\r\n\t\t\t\tdata:echartsOption.xAxis.map(x => yAxis[x] || 0)\r\n\t\t\t}]:\r\n\t\t\techartsOption.legend.map(l => {\r\n              const legend = yAxis[l] || {};\r\n              return {\r\n                name: l,\r\n                type: \"line\",\r\n                data: echartsOption.xAxis.map(x => legend[x] || 0)\r\n              };\r\n            })\r\n          };\r\n        });\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    console.log(\"刷新表格页面,参数\", this.params);\r\n\r\n    vda.ready().then(() =>\r\n      vda.list().then(r => {\r\n        const ret = r.content.ret || [];\r\n        this.tree = ret.filter(e => e[this.treeProps.label] === \"数据源模型\");\r\n      })\r\n    );\r\n  },\r\n  resume() {\r\n    console.log(\"表格页面resume\");\r\n  },\r\n  pause() {\r\n    console.log(\"表格页面pause\");\r\n  },\r\n  watch: {\r\n    data: {\r\n      handler(n, o) {\r\n        debugger;\r\n        if (this.echarts) {\r\n          this.echarts.setOption(this.data);\r\n        } else {\r\n          this.echarts = echarts.init(this.$refs.echartsCtn);\r\n\r\n          this.echarts.setOption(this.data);\r\n\r\n          window.eee = this.echarts;\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.aweb-table-toolbar {\r\n  padding: 12px;\r\n  text-align: left;\r\n}\r\n.vda-ctn {\r\n  display: flex;\r\n  flex-direction: row;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.el-tree.vda-api-list {\r\n  width: 200px;\r\n  overflow: auto;\r\n}\r\n\r\n.vda-config-ctn {\r\n  flex: 1;\r\n  overflow: auto;\r\n  height: 100%;\r\n}\r\n.vda-preview-ctn {\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow: auto;\r\n}\r\n</style>"],"sourceRoot":"src/views/global"}]}